//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplBufferError {
    /// 0 (0x0) - Invalid System Program
    #[error("Invalid System Program")]
    InvalidSystemProgram,
    /// 1 (0x1) - Error deserializing account
    #[error("Error deserializing account")]
    DeserializationError,
    /// 2 (0x2) - Error serializing account
    #[error("Error serializing account")]
    SerializationError,
    /// 3 (0x3) - The account has already been initialized
    #[error("The account has already been initialized")]
    AlreadyInitialized,
    /// 4 (0x4) - The key for the account is invalid.
    #[error("The key for the account is invalid.")]
    DerivedKeyInvalid,
    /// 5 (0x5) - The account has not yet been initialized
    #[error("The account has not yet been initialized")]
    NotInitialized,
    /// 6 (0x6) - The payer does not have authority to perform this action.
    #[error("The payer does not have authority to perform this action.")]
    InvalidAuthority,
    /// 7 (0x7) - Numerical Overflow
    #[error("Numerical Overflow")]
    NumericalOverflow,
}

impl solana_program::program_error::PrintProgramError for MplBufferError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
